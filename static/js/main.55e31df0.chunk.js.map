{"version":3,"sources":["panel/flow.tsx","panel/graphql.ts","panel/flowrun.tsx","panel/graph/nodewrapper.tsx","panel/graph/tasknode.tsx","panel/graph/channelnode.tsx","panel/graph/operatornode.tsx","panel/graph/graphview.tsx","panel/show/graph.tsx","panel/show/logs.tsx","panel/show/tasks.tsx","panel/show/show.tsx","panel/flowruns.tsx","panel/path.tsx","panel/flows.tsx","panel/main.tsx","panel/header.tsx","panel/theme.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","Flow","flow","setFlow","activeFlow","className","id","Box","height","onClick","name","GET_FLOWS","gql","GET_FLOWRUNS","GET_TASKRUNS_STATE_ONLY","GET_RUNLOGS","root","width","FlowRun","flowrun","setFlowRun","activeFlowrun","getHandleLayoutStyles","num","isLeft","sep","styles","top","i","push","NodeWrapper","props","data","children","isCircle","task","inputStyles","input","length","InputHandles","map","ch_id","index","type","position","Position","Left","style","background","outputStyles","output","OutputHandles","ch","Right","borderRadius","padding","memo","useTaskRunsStyles","overflow","flexWrap","justifyContent","color","opacity","textAlign","display","flexDirection","alignItems","TaskRunsPanel","classes","useQuery","variables","flowrun_id","task_id","loading","error","stopPolling","startPolling","useEffect","stateCounts","Array","fill","stateMap","Map","get_taskruns","state","state_type","has","set","count","get","forEach","value","key","Grid","container","direction","runState","Typography","variant","marginLeft","marginRight","LinearProgress","Skeleton","TaskNode","useStoreState","transform","showContent","label","replace","ChannelNode","OperatorNode","controls","left","zIndex","connectionLineStyle","stroke","nodeTypes","taskNode","operatorNode","channelNode","dagreGraph","graphlib","Graph","setDefaultEdgeLabel","getLayoutedElements","elements","isHorizontal","setGraph","rankdir","el","isNode","setNode","setEdge","source","target","layout","nodeWithPosition","node","targetPosition","Top","sourcePosition","Bottom","x","Math","random","y","GraphView","useState","flowInstance","setFlowInstance","setElements","tasks","edges","input_channels","ch_task_map","task_input_map","edge","channel_id","output_task_input","output_task_input_id","sourceHandle","targetHandle","animated","nodes","is_operator","context","task_config","startsWith","resolve_flow","layoutedElements","fitView","onConnect","useCallback","params","onLoad","onLayout","connectionLineType","ConnectionLineType","SmoothStep","snapToGrid","snapGrid","defaultZoom","onlyRenderVisibleElements","nodeStrokeColor","n","nodeColor","lineHeight","whiteSpace","textOverflow","GridCellExpand","React","wrapper","useRef","cellDiv","cellValue","anchorEl","setAnchorEl","showFullCell","setShowFullCell","showPopper","setShowPopper","document","addEventListener","handleKeyDown","removeEventListener","nativeEvent","ref","onMouseEnter","isCurrentlyOverflown","isOverflown","current","onMouseLeave","Popper","open","Paper","elevation","minHeight","offsetHeight","overflowWrap","columns","field","headerName","flex","renderCell","toString","hide","Filter","LogsPanel","rows","get_runlogs","autoHeight","components","Toolbar","GridToolbar","TasksPanel","TabPanel","other","role","hidden","aria-labelledby","a11yProps","flexGrow","backgroundColor","palette","paper","ShowPanel","setValue","AppBar","Tabs","onChange","event","newValue","Tab","flowrunsPanel","panel","grid","overflowY","gridItem","FlowRuns","flowruns","setFlowrun","console","log","FlowRunsPanel","wrap","item","curFlowrun","split","defaultSize","maxSize","minSize","StyledBreadcrumb","withStyles","grey","spacing","fontWeight","typography","fontWeightRegular","boxShadow","shadows","emphasize","Chip","Path","pathList","Breadcrumbs","path","component","href","link","icon","DUMMY_FLOWRUNS","defaultPathList","flowsPanel","Flows","flows","flow_ids","flow_id","FlowsPanel","curFlow","get_flowruns","DUMMY_FLOWS","Main","get_flows","useServerChooserStyles","iconButton","divider","margin","useHeaderStyles","menuButton","title","ServerChooser","server","setServer","inputServer","setInputServer","IconButton","InputBase","placeholder","defaultValue","e","Divider","orientation","Header","createMuiTheme","primary","main","secondary","fontSize","App","client","ApolloClient","uri","cache","InMemoryCache","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.55e31df0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../style/App.css\"\nimport {createStyles, makeStyles, Paper, Theme} from \"@material-ui/core\";\nimport Box from \"@material-ui/core/Box\"\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n  })\n)\n\n\n// @ts-ignore\nfunction Flow({flow, setFlow, activeFlow}) {\n  const classes = useStyles()\n  let className = `tensorsite-card ${activeFlow && (activeFlow.id === flow.id) ? \"active\" : \"\"}`\n  return (\n    <Box className={className} height=\"100px\">\n      <Box className=\"tensorsite-content\" height=\"100%\" onClick={() => setFlow(flow)}>\n        {flow.name}\n      </Box>\n      \n    </Box>\n  )\n}\n\nexport default Flow;","import {gql} from \"@apollo/client\";\n\n\n// exclude flowruns\nexport const GET_AGENTS = gql`\n    query {\n        get_agents {\n            id\n            name\n            labels\n            address\n        }\n    }\n`\n\n// exclude flowruns\nexport const GET_FLOWS = gql`\n    query($input: GetFlowsInput!) {\n        get_flows(input: $input) {\n            id\n            name\n            full_name\n            labels\n            tasks {\n                id\n                name\n                full_name\n                labels\n                flow_id\n                output {\n                    id\n                    task_id\n                    flow_id\n                }\n                docstring\n                context\n            }\n            edges {\n                channel_id\n                task_id\n            }\n            docstring\n            serialized_flow\n            context\n        }\n    }\n`\n\n// exclude taskruns\nexport const GET_FLOWRUNS = gql`\n    query($input: GetFlowRunsInput!) {\n        get_flowruns(input: $input) {\n            id\n            agent_id\n            flow_id\n            name\n            labels\n            context\n            state {\n                state_type\n                result\n                message\n            }\n            start_time\n            end_time\n            last_heartbeat\n        }\n    }\n`\n\nexport const GET_TASKRUNS_STATE_ONLY = gql`\n    query($input: GetTaskRunsInput!) {\n        get_taskruns(input: $input) {\n            id\n            state {\n                state_type\n            }\n        }\n    }\n`\n\nexport const GET_TASKRUNS = gql`\n    query($input: GetTaskRunsInput!) {\n        get_taskruns(input: $input) {\n            id\n            flowrun_id\n            agent_id\n            task_id\n            context\n            start_time\n            end_time\n            last_heartbeat\n            state {\n                state_type\n                result\n                message\n            }\n        }\n    }\n`\nexport const GET_RUNLOGS = gql`\n    query($input: GetRunLogsInput!) {\n        get_runlogs(input: $input) {\n            id\n            level\n            time\n            message\n            task_id\n            flow_id\n            taskrun_id\n            flowrun_id\n            agent_id\n        }\n    }\n`\n\nexport const UPDATE_FLOWRUN = gql`\n    mutation($input: FlowRunInput!) {\n        update_flowrun(input: $input) {\n            id\n        }\n    }\n`","import React from \"react\";\nimport {createStyles,  makeStyles, Theme, Box} from \"@material-ui/core\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: '100px',\n      width: \"100%\"\n    }\n  })\n)\n\n// @ts-ignore\nfunction FlowRun({flowrun, setFlowRun, activeFlowrun}) {\n  const classes = useStyles()\n  let className = `tensorsite-card ${activeFlowrun && (activeFlowrun.id === flowrun.id) ? \"active\" : \"\"}`\n  return (\n    <Box className={className} height=\"100px\">\n      <Box className=\"tensorsite-content\" onClick={() => setFlowRun(flowrun)}>\n        {flowrun.name}\n      </Box>\n    </Box>\n  )\n}\n\n\nexport default FlowRun;","import React, {memo} from \"react\";\n\nimport {Box} from \"@material-ui/core\"\nimport {Handle, Position} from \"react-flow-renderer\";\nimport {layout} from \"dagre\";\n\n// TODO NodeWrapper is aimed for automatically layout input and output handles\n// TODO Now only rectangular are supported\n\n\nfunction getHandleLayoutStyles(width: number, height: number, num: number, isLeft: boolean)  {\n  if (num <= 0) return []\n  num += 1\n  const sep = height / num;\n  let styles = []\n  let top = 0, left = isLeft ? 0 : width;\n  for (let i = 0; i < num; i++) {\n    top += sep;\n    styles.push({\n      top: top,\n      // left: left\n    })\n  }\n  \n  return styles;\n}\n\n// @ts-ignore\nfunction NodeWrapper(props) {\n  let {\n    data,\n    children,\n    className,\n    width = 100,\n    height = 100,\n    isCircle = false,\n  } = props;\n  const task = data;\n  const inputStyles = getHandleLayoutStyles(width, height, task.input.length, true)\n  const InputHandles = (\n    task.input.map((ch_id: string, index: number) => (\n      <Handle\n        key={ch_id}\n        type=\"target\"\n        id={ch_id}\n        position={Position.Left}\n        style={{background: \"red\", ...inputStyles[index]}}\n      />\n    ))\n  );\n  const outputStyles = getHandleLayoutStyles(width, height, task.output.length, false)\n  const OutputHandles = (\n    task.output.map((ch: any, index: number) => (\n      <Handle\n        key={ch.id}\n        type=\"source\"\n        position={Position.Right}\n        id={ch.id}\n        style={{background: \"blue\", ...outputStyles[index]}}\n      />\n    ))\n  );\n  \n  return (\n    <Box className={className} height={height} width={width} style={{borderRadius: isCircle ? \"50%\" : \"1%\", padding: 0}}>\n      {InputHandles}\n      {children}\n      {OutputHandles}\n    </Box>\n  )\n}\n\n\nexport default memo(NodeWrapper);","import React, {memo, useEffect} from 'react'\n\nimport {Handle, Position, useStoreState} from 'react-flow-renderer'\nimport {Paper, Box, Typography, makeStyles, Theme, createStyles, Grid} from \"@material-ui/core\";\nimport NodeWrapper from \"./nodewrapper\"\nimport {useQuery} from \"@apollo/client\";\nimport {GET_TASKRUNS_STATE_ONLY} from \"../graphql\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\n\n\nconst useTaskRunsStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: \"5px\",\n      width: \"100%\",\n      overflow: \"hidden\" ,\n      flexWrap: \"nowrap\",\n      justifyContent: \"start\",\n      height: \"80px\", // any better way?\n    }\n  })\n);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: \"5px\",\n      color: \"white\",\n      background: \"#3474e0\",\n      opacity: 0.8,\n      borderRadius: \"10%\",\n      textAlign: \"center\",\n      overflow: \"hidden\",\n      display: \"flex\",\n      flexDirection: 'column',\n      alignItems: 'start',\n      justifyContent: 'center',\n    }\n  })\n);\n\n\n\n// @ts-ignore\nfunction TaskRunsPanel({task}) {\n  const classes = useTaskRunsStyles()\n  // polling wont's top even after unmounted. https://github.com/apollographql/apollo-client/issues/6391\n  const {loading, error, data, stopPolling, startPolling} = useQuery(GET_TASKRUNS_STATE_ONLY, {\n    variables: {\n      input: {\n        flowrun_id: [task.flowrun_id],\n        task_id: [task.id]\n      },\n    },\n    // pollInterval: 2000,\n  });\n  useEffect(() => {\n    startPolling(2000);\n    return () => {\n      stopPolling()\n    }\n  }, []);\n  \n  \n  \n  let stateCounts = [];\n  if (loading || error) {\n    stateCounts = Array(5).fill(null)\n  }\n  else {\n    let stateMap = new Map();\n    for (let taskrun of data.get_taskruns) {\n      const state = taskrun.state.state_type\n      if (!stateMap.has(state)) {\n        stateMap.set(state, {\n          state: state,\n          count: 0,\n        })\n      }\n      let state_info = stateMap.get(state)\n      state_info.count += 1\n    }\n    stateMap.forEach((value, key) => {\n      stateCounts.push(value);\n    })\n  }\n  // console.log(stateCounts)\n  \n  return (\n    <Grid container direction={\"column\"} className={classes.root}>\n      {stateCounts.map((runState: any, index: number) => (\n        runState ? (\n          <Box key={runState.state} width={\"100%\"} display={\"flex\"} alignItems={\"center\"} justifyContent={\"center\"}>\n            <Box>\n              <Typography variant={\"subtitle2\"}>{ runState.count }</Typography>\n            </Box>\n            <Box style={{marginLeft: 5, marginRight: 5}}>\n              <LinearProgress style={{height: 8, width: 15}}/>\n            </Box>\n            <Box>\n              <Typography variant={\"subtitle2\"}>{ runState.state }</Typography>\n            </Box>\n          </Box>\n        ) : (\n          <Box key={index} width={\"100%\"} display={\"flex\"} alignItems={\"center\"}>\n            <Skeleton variant=\"circle\" height={\"9px\"} width={\"9px\"}/>\n            <Skeleton variant=\"text\" width={\"100%\"}/>\n          </Box>\n        )\n        )\n      )}\n    </Grid>\n  )\n};\n\n// @ts-ignore\nfunction TaskNode(props) {\n  const classes = useStyles()\n  const [, , zoom] = useStoreState((state) => state.transform);\n  const showContent = zoom >= 1.5;\n  \n  const {data} = props;\n  const {width, height} = data;\n  const task = data;\n  \n  const label = task.name.replace(\"Operator\", \"\").replace(/\\[.*\\]/g, '')\n  return (\n    <NodeWrapper {...props} className={`${classes.root} nowheel`} height={height} width={width}>\n      <Box width={\"100%\"}>\n        <Box>\n          <Typography variant={\"h5\"}>\n            {label}\n          </Typography>\n        </Box>\n        <Box>\n          {\n            (showContent && data.flowrun_id) ?\n            <TaskRunsPanel task={task}/>\n            : \"\"\n          }\n        </Box>\n      </Box>\n    </NodeWrapper>\n  )\n}\n\nexport default TaskNode;","import {Box, createStyles, makeStyles, Theme, Typography} from \"@material-ui/core\"\nimport {Handle, Position} from \"react-flow-renderer\";\nimport React, {memo} from \"react\";\n\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      color: \"white\",\n      background: \"#455064\",\n      borderRadius: \"10%\",\n      textAlign: \"center\",\n      overflow: \"hidden\",\n      display: \"flex\",\n      flexDirection: 'column',\n      alignItems: 'start',\n      justifyContent: 'center'\n    }\n  })\n);\n\n// @ts-ignore\nfunction ChannelNode({id, data}) {\n  const {width, height} = data;\n  const classes = useStyles()\n  return (\n    <Box className={classes.root} height={`${height}px`} width={`${width}px`}>\n      <Box width={\"100%\"}>\n        <Typography>\n          Channel\n        </Typography>\n      </Box>\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        id={id}\n        style={{background: \"blue\"}}\n      />\n\n    </Box>\n  )\n};\n\n\nexport default memo(ChannelNode);","import React, {memo} from \"react\"\nimport {createStyles, makeStyles, Theme, Typography} from \"@material-ui/core\";\nimport {Box} from \"@material-ui/core\"\nimport {Handle, Position} from \"react-flow-renderer\"\nimport NodeWrapper from \"./nodewrapper\"\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: \"5px\",\n      color: \"white\",\n      background: '#ff6f00',\n      borderRadius: \"10%\",\n      textAlign: \"center\",\n      overflow: \"hidden\",\n      display: \"flex\",\n      flexDirection: 'column',\n      alignItems: 'start',\n      justifyContent: 'center',\n    }\n  })\n);\n\n// @ts-ignore\nfunction OperatorNode(props) {\n  const classes = useStyles()\n  \n  const {data, isCircle=false} = props;\n  const {width, height} = data;\n  const task = data;\n  \n  const label = task.name.replace(\"Operator\", \"\").replace(/\\[.*\\]/g, '')\n  \n  return (\n    <NodeWrapper {...props} isCircle={isCircle} className={classes.root} width={width} height={height}>\n      <Box width={\"100%\"} overflow={\"hidden\"}>\n        <Typography>{label}</Typography>\n      </Box>\n    </NodeWrapper>\n  )\n}\n\nexport default memo(OperatorNode)","import React, {useCallback, useEffect, useState} from \"react\";\nimport ReactFlow, {\n  ConnectionLineType,\n  ControlButton,\n  Controls,\n  isNode,\n  MiniMap,\n  Position,\n  ReactFlowProvider\n} from 'react-flow-renderer';\n\nimport {Box, createStyles, makeStyles, Theme} from \"@material-ui/core\";\nimport VerticalSplitIcon from '@material-ui/icons/VerticalSplit';\nimport HorizontalSplitIcon from '@material-ui/icons/HorizontalSplit';\n\n\nimport {graphlib, layout} from 'dagre';\n\nimport TaskNode from \"./tasknode\";\nimport ChannelNode from \"./channelnode\"\nimport OperatorNode from \"./operatornode\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    controls: {\n      position: \"relative\",\n      top: \"10px\",\n      left: \"10px\",\n      zIndex: 99999999999,\n    }\n  })\n)\n\nconst connectionLineStyle = { stroke: '#fff' };\nconst nodeTypes = {\n  taskNode: TaskNode,\n  operatorNode: OperatorNode,\n  channelNode: ChannelNode\n};\n\n\nfunction resolve_flow(flow: any, flowrun: any) {\n  if (!flow) return []\n  const tasks: any = [...flow.tasks]\n  const edges: any = []\n  const input_channels: any = []\n  \n  let ch_task_map = new Map()\n  tasks.forEach((task: any) => {\n    task.output.forEach((ch: any) => {\n      // @ts-ignore\n      ch_task_map.set(ch.id, task.id)\n    })\n  })\n  \n  let task_input_map = new Map()\n  \n  // @ts-ignore\n  flow.edges.forEach((edge, index) => {\n    const channel_id: String = edge.channel_id\n    const task_id: String = edge.task_id\n    // add reverse link\n    if (!task_input_map.has(task_id)) {\n      task_input_map.set(task_id, [])\n    }\n    let output_task_input = task_input_map.get(task_id)\n    const output_task_input_id = `${channel_id}-${output_task_input.length}`\n    output_task_input.push(output_task_input_id)\n  \n    // channel-task\n    if (!ch_task_map.get(channel_id)) {\n      ch_task_map.set(channel_id, channel_id);\n      input_channels.push({\n        id: channel_id,\n        type: 'channelNode',\n        data: {\n          label: \"Input Channel\",\n          width: 50,\n          height: 25\n        },\n        position: {x: 0, y: 0},\n        sourcePosition: \"right\",\n      })\n    }\n    // task-task\n    // @ts-ignore\n    edges.push({\n      id: `${channel_id}|${task_id}|${index}`,\n      source: ch_task_map.get(channel_id),\n      target: task_id,\n      sourceHandle: channel_id,\n      targetHandle: output_task_input_id,\n      animated: true,\n    })\n      \n  })\n  const nodes = tasks.map((task: any) => {\n    const name = task.context.task_config.name;\n    const is_operator = name.startsWith(\"Operator\")\n    return {\n      id: task.id,\n      type: is_operator ? \"operatorNode\" : \"taskNode\",\n      data: {\n        ...task,\n        input: task_input_map.get(task.id) || [],\n        width: is_operator ? 40: 80,\n        height: is_operator ? 40 : 120,\n        flowrun_id: (is_operator || !flowrun) ? null : flowrun.id,\n      },\n      position: {\n        x: 0,\n        y: 0\n      }\n    }\n  })\n  \n  const elements =  [...nodes, ...input_channels, ...edges]\n  // console.log(elements)\n  return elements\n}\n\n\n\n\n\nconst dagreGraph = new graphlib.Graph();\ndagreGraph.setDefaultEdgeLabel(() => ({}));\n\n// In order to keep this example simple the node width and height are hardcoded.\n// In a real world app you would use the correct width and height values of\n// const nodes = useStoreState(state => state.nodes) and then node.__rf.width, node.__rf.height\n\n\n// @ts-ignore\nconst getLayoutedElements = (elements, direction = 'TB') => {\n  const isHorizontal = direction === 'LR';\n  dagreGraph.setGraph({ rankdir: direction });\n  \n  elements.forEach((el: any) => {\n    if (isNode(el)) {\n      // @ts-ignore\n      dagreGraph.setNode(el.id, { width: el.data.width, height: el.data.height });\n    } else {\n      dagreGraph.setEdge(el.source, el.target);\n    }\n  });\n  \n  layout(dagreGraph);\n  \n  return elements.map((el: any) => {\n    if (isNode(el)) {\n      const nodeWithPosition = dagreGraph.node(el.id);\n      el.targetPosition = isHorizontal ? Position.Left : Position.Top;\n      el.sourcePosition = isHorizontal ? Position.Right : Position.Bottom;\n      \n      // unfortunately we need this little hack to pass a slighltiy different position\n      // to notify react flow about the change. More over we are shifting the dagre node position\n      // (anchor=center center) to the top left so it matches the react flow node anchor point (top left).\n      // @ts-ignore\n      // @ts-ignore\n      el.position = {\n        x: nodeWithPosition.x - el.data.width / 2 + Math.random() / 1000,\n        y: nodeWithPosition.y - el.data.height / 2,\n      };\n    }\n    \n    return el;\n  });\n};\n\n\n\n// @ts-ignore\nfunction GraphView({flow, flowrun}) {\n  const classes = useStyles()\n  const [flowInstance, setFlowInstance] = useState(null)\n  const [elements, setElements] = useState([])\n  \n  \n  useEffect(() => {\n    const elements = resolve_flow(flow, flowrun)\n    const layoutedElements = getLayoutedElements(elements, \"LR\")\n    // @ts-ignore\n    setElements(layoutedElements)\n  }, [flow, flowrun])\n  \n  \n  useEffect(() => {\n    if (flowInstance && elements.length > 0) {\n      // @ts-ignore\n      flowInstance.fitView()\n    }\n  }, [flow, elements.length])\n  \n  const onConnect = useCallback(\n    (params) => {\n      return\n    }\n      , []\n  )\n  \n  const onLoad = useCallback(\n    (flow) => {\n      if (!flowInstance) {\n        setFlowInstance(flow)\n      }\n    },\n    [flowInstance]\n  )\n  \n  const onLayout = useCallback(\n    (direction) => {\n      const layoutedElements = getLayoutedElements(elements, direction);\n      setElements(layoutedElements);\n    },\n    [elements]\n  );\n  \n  // @ts-ignore\n  return (\n    <Box height=\"100%\" width=\"100%\">\n      <ReactFlowProvider>\n        <ReactFlow\n          elements={elements}\n          onConnect={onConnect}\n          onLoad={onLoad}\n          nodeTypes={nodeTypes}\n          connectionLineStyle={connectionLineStyle}\n          connectionLineType={ConnectionLineType.SmoothStep}\n          snapToGrid={true}\n          snapGrid={[2, 2]}\n          defaultZoom={1}\n          onlyRenderVisibleElements={true}\n        >\n  \n          <MiniMap\n            // @ts-ignore\n            nodeStrokeColor={(n:any) => {\n              if (n.type === 'taskNode') return '#3474e0';\n              if (n.type === 'operatorNode') return '#ff6f00';\n              if (n.type === 'channelNode') return 'red';\n              return '#fff';\n            }}\n            // @ts-ignore\n            nodeColor={(n:any) => {\n              if (n.type === 'taskNode') return '#3474e0';\n              if (n.type === 'operatorNode') return '#ff6f00';\n              if (n.type === 'channelNode') return '#455064';\n              return '#fff';\n          }}\n          >\n          </MiniMap>\n          <Controls>\n            <ControlButton onClick={() => onLayout('LR')}>\n              <VerticalSplitIcon/>\n            </ControlButton>\n            <ControlButton onClick={() => onLayout('TB')}>\n              <HorizontalSplitIcon/>\n            </ControlButton>\n          </Controls>\n        </ReactFlow>\n\n      </ReactFlowProvider>\n    </Box>\n  )\n}\n\nexport default GraphView\n","import React from \"react\";\nimport GraphView from \"../graph/graphview\"\n\n\n// @ts-ignore\nfunction Graph(props) {\n  return (\n    <GraphView {...props}/>\n  )\n}\n\nexport default Graph;","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport {useQuery} from '@apollo/client'\nimport {GET_RUNLOGS} from \"../graphql\";\n\n\n\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport {\n  DataGrid,\n  GridToolbar,\n  GridColDef,\n  GridCellParams,\n  isOverflown,\n} from '@material-ui/data-grid';\n\ninterface GridCellExpandProps {\n  value: string;\n  width: number;\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      alignItems: 'center',\n      lineHeight: '24px',\n      width: '100%',\n      height: '100%',\n      position: 'relative',\n      display: 'flex',\n      '& .cellValue': {\n        whiteSpace: 'nowrap',\n        overflow: 'auto',\n        textOverflow: 'ellipsis',\n      },\n    },\n  }),\n);\n\nconst GridCellExpand = React.memo(function GridCellExpand(\n  props: GridCellExpandProps,\n) {\n  const { width, value } = props;\n  const wrapper = React.useRef<HTMLDivElement | null>(null);\n  const cellDiv = React.useRef(null);\n  const cellValue = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const classes = useStyles();\n  const [showFullCell, setShowFullCell] = React.useState(false);\n  const [showPopper, setShowPopper] = React.useState(false);\n  \n  const handleMouseEnter = () => {\n    const isCurrentlyOverflown = isOverflown(cellValue.current!);\n    setShowPopper(isCurrentlyOverflown);\n    setAnchorEl(cellDiv.current);\n    setShowFullCell(true);\n  };\n  \n  const handleMouseLeave = () => {\n    setShowFullCell(false);\n  };\n  \n  React.useEffect(() => {\n    if (!showFullCell) {\n      return undefined;\n    }\n    \n    function handleKeyDown(nativeEvent: KeyboardEvent) {\n      // IE11, Edge (prior to using Bink?) use 'Esc'\n      if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {\n        setShowFullCell(false);\n      }\n    }\n    \n    document.addEventListener('keydown', handleKeyDown);\n    \n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [setShowFullCell, showFullCell]);\n  \n  return (\n    <div\n      ref={wrapper}\n      className={classes.root}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <div\n        ref={cellDiv}\n        style={{\n          height: 1,\n          width,\n          display: 'block',\n          position: 'absolute',\n          top: 0,\n        }}\n      />\n      <div ref={cellValue} className=\"cellValue\">\n        {value}\n      </div>\n      {showPopper && (\n        <Popper\n          open={showFullCell && anchorEl !== null}\n          anchorEl={anchorEl}\n          style={{ width, marginLeft: -17 }}\n        >\n          <Paper\n            elevation={1}\n            style={{ minHeight: wrapper.current!.offsetHeight - 3 }}\n          >\n            <Typography variant=\"body2\" style={{ padding: 8, overflowWrap: \"anywhere\"}}>\n              {value}\n            </Typography>\n          </Paper>\n        </Popper>\n      )}\n    </div>\n  );\n});\n\nfunction renderCellExpand(params: GridCellParams) {\n  return (\n    <GridCellExpand\n      value={params.value ? params.value.toString() : ''}\n      width={400}\n    />\n  );\n}\n\n\n\nconst columns: GridColDef[] = [\n  {field: 'level', headerName: \"Level\"},\n  {field: 'message', headerName: \"Message\", flex: 1, renderCell: renderCellExpand},\n  {field: 'time', headerName: \"Time\", type: \"number\"},\n  {field: 'id', headerName: \"ID\"},\n  {field: 'task_id', headerName: \"TaskID\", hide: true},\n  {field: 'flow_id', headerName: \"FlowID\", hide: true},\n  {field: 'taskrun_id', headerName: \"TaskRunID\", hide: true},\n  {field: 'flowrun_id', headerName: \"FlowRunID\", hide: true},\n  {field: 'agent_id', headerName: \"AgentID\", hide: true},\n]\n\n\nfunction Filter() {\n  return (\n    <Paper>\n      Logs filter\n    </Paper>\n  )\n}\n\n// @ts-ignore\nfunction LogsPanel({flow, flowrun}) {\n  const {loading, error, data} = useQuery(GET_RUNLOGS, {\n    variables: {\n      input: {\n        flowrun_id: flowrun ? [flowrun.id] : [\"NoSuchId\"],\n      },\n    },\n  });\n  \n  return (\n    <Box height=\"100%\">\n      <Filter/>\n      <Box height=\"80%\" style={{overflow: \"auto\"}}>\n        <DataGrid\n          rows={loading ? [] : data.get_runlogs}\n          columns={columns}\n          autoHeight={true}\n          loading={true}\n          components={{\n            Toolbar: GridToolbar\n          }}\n        />\n      </Box>\n    </Box>\n  )\n}\n\nexport default LogsPanel;","import React from \"react\"\nimport Box from \"@material-ui/core/Box\";\n\n\n// @ts-ignore\nfunction TasksPanel({flow, flowrun}) {\n  return (\n    <Box>Tasks</Box>\n  )\n}\n\n\nexport default TasksPanel;\n\n\n\n","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Graph from \"./graph\";\nimport LogsPanel from \"./logs\"\nimport TasksPanel from \"./tasks\"\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  \n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n      style={{height: \"100%\"}}\n    >\n      {value === index && (\n        <Box height=\"100%\">\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n};\n\nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n}));\n\n// @ts-ignore\nexport default function ShowPanel({flow, flowrun}) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  \n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n  \n  return (\n    <Box className={classes.root} height=\"100%\">\n      <AppBar position=\"static\">\n        <Tabs value={value} onChange={handleChange}>\n          <Tab label=\"Graph\" {...a11yProps(0)} />\n          <Tab label=\"Tasks\" {...a11yProps(1)} />\n          <Tab label=\"Logs\" {...a11yProps(2)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <Graph  flow={flow} flowrun={flowrun}/>\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <TasksPanel flow={flow} flowrun={flowrun}/>\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <LogsPanel flow={flow} flowrun={flowrun}/>\n      </TabPanel>\n    </Box>\n  );\n}\n","import React, {useEffect, useState} from \"react\";\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport {createStyles, Grid, Box, makeStyles, Theme, Typography} from \"@material-ui/core\";\nimport {useQuery} from '@apollo/client'\nimport FlowRun from \"./flowrun\";\nimport {GET_FLOWRUNS} from \"./graphql\";\nimport SplitPane from \"react-split-pane\";\nimport ShowPanel from \"./show/show\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    flowrunsPanel: {\n      height: \"100%\"\n    },\n    panel: {\n    \n    },\n    grid: {\n      flex: \"1 1 auto\",\n      overflowY: \"auto\"\n    },\n    gridItem: {\n      width: \"100%\"\n    },\n  })\n)\n\n// @ts-ignore\nfunction FlowRuns({flow, flowruns}) {\n  const classes = useStyles()\n  \n  const [flowrun, setFlowrun] = useState(null)\n  // any other way?\n  useEffect(() => {\n    setFlowrun(null)\n  }, [flow])\n  console.log(flowrun)\n  \n  const FlowRunsPanel = (\n    <Grid className={classes.flowrunsPanel} container direction=\"column\" wrap=\"nowrap\">\n      <Grid className={classes.panel} item>\n        <Box height={\"50px\"}>\n          <Typography variant={\"h4\"}>Flow Runs</Typography>\n        </Box>\n      </Grid>\n      <Grid className={classes.grid} item container direction=\"column\" wrap=\"nowrap\">\n        {\n          flowruns.map((curFlowrun: any, index: number) => (\n            curFlowrun ? (\n              <Grid item key={curFlowrun.id}>\n                <FlowRun flowrun={curFlowrun} setFlowRun={setFlowrun} activeFlowrun={flowrun}/>\n              </Grid>\n            ) : (\n              <Grid item key={index}>\n                <Box height=\"100px\">\n                  <Skeleton variant=\"text\" width={\"40%\"}/>\n                  <Skeleton variant=\"text\"/>\n                  <Skeleton variant=\"rect\" height={\"60%\"}/>\n                </Box>\n              </Grid>\n            )\n          ))\n        }\n      </Grid>\n    </Grid>\n  )\n  \n  return (\n  <SplitPane split=\"vertical\" defaultSize=\"15vw\" maxSize={300} minSize={100}>\n    <Box height=\"100%\">\n      {FlowRunsPanel}\n    </Box>\n    <Box height=\"100%\">\n      <ShowPanel flow={flow} flowrun={flowrun}/>\n    </Box>\n  </SplitPane>\n)\n}\n\nexport default FlowRuns","import React from \"react\";\nimport {emphasize, withStyles} from '@material-ui/core/styles';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Chip from '@material-ui/core/Chip';\n\n\nconst StyledBreadcrumb = withStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.grey[100],\n    height: theme.spacing(3),\n    color: theme.palette.grey[800],\n    fontWeight: theme.typography.fontWeightRegular,\n    '&:hover, &:focus': {\n      backgroundColor: theme.palette.grey[300],\n    },\n    '&:active': {\n      boxShadow: theme.shadows[1],\n      backgroundColor: emphasize(theme.palette.grey[300], 0.12),\n    },\n  },\n}))(Chip) as typeof Chip;\n\n\nfunction Path(props: { pathList: any, onClick: any}) {\n  const {pathList, onClick} = props\n  \n  \n  return (\n    <Breadcrumbs>\n      {pathList.map((path: any) =>\n        <StyledBreadcrumb\n          key={path.label}\n          component=\"a\"\n          href={path.link}\n          label={path.label}\n          icon={path.icon}\n          onClick={onClick(path.label)}\n        />\n      )}\n    </Breadcrumbs>\n  )\n}\n\n\nexport default Path;","import React, {useEffect, useState} from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport {createStyles, Grid, makeStyles, Theme, Typography} from \"@material-ui/core\";\nimport {useQuery} from '@apollo/client'\nimport Flow from \"./flow\";\nimport {GET_FLOWRUNS, GET_FLOWS} from \"./graphql\";\nimport \"../style/App.css\"\nimport SplitPane from \"react-split-pane\";\nimport FlowRunsPanel from \"./flowruns\";\nimport ShowPanel from \"./show/show\";\nimport FlowRuns from \"./flowruns\";\nimport Path from \"./path\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport Skeleton from '@material-ui/lab/Skeleton';\n\n\nconst DUMMY_FLOWRUNS = Array(15).fill(null);\n\nconst defaultPathList = [\n  {\n    link: '#',\n    label: \"Home\",\n    icon: <HomeIcon/>\n  },\n  {\n    link: null,\n    label: 'Flow',\n    icon: <ExpandMoreIcon/>\n  },\n  {\n    link: null,\n    label: 'Task',\n    icon: <ExpandMoreIcon/>\n  },\n  {\n    link: null,\n    label: 'FlowRun',\n    icon: <ExpandMoreIcon/>\n  },\n  {\n    link: null,\n    label: 'TaskRun',\n    icon: <ExpandMoreIcon/>\n  }\n]\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    flowsPanel: {\n      height: \"100%\"\n    },\n    panel: {\n    \n    },\n    grid: {\n      flex: \"1 1 auto\",\n      overflowY: \"auto\"\n    },\n    gridItem: {\n      width: \"100%\"\n    },\n  })\n)\n\n// @ts-ignore\nfunction Flows({flows}) {\n  const classes = useStyles()\n  const [flow, setFlow] = useState(null)\n  const [pathList, setPathList] = useState(defaultPathList)\n  // @ts-ignore\n  const flow_ids = flow ? [flow.id] : []\n  const {loading, error, data, startPolling, stopPolling} = useQuery(GET_FLOWRUNS, {\n    variables: {\n      input: {\n        flow_id: flow_ids\n      },\n    },\n    // pollInterval: 4000,\n  });\n  \n  useEffect(() => {\n    startPolling(4000);\n    return () => {\n      stopPolling()\n    }\n  }, []);\n  \n  const onPathLickClickHandler = (label: string) => {\n    // const clickedPath = pathList.find((path) => path.label === label)\n    // if (clickedPath !== undefined) {\n    //   const index = pathList.indexOf(clickedPath);\n    //   const newPathList = pathList.slice(0, index + 1)\n    //   setPathList(newPathList)\n    // }\n  }\n  const FlowsPanel = (\n    <Grid className={classes.flowsPanel} container direction=\"column\" wrap=\"nowrap\">\n      <Grid className={classes.panel} item>\n        <Box height={\"50px\"}>\n          <Typography variant={\"h4\"}>Flows</Typography>\n        </Box>\n      </Grid>\n      <Grid className={classes.grid} item container direction=\"column\" wrap=\"nowrap\">\n        {\n          flows.map((curFlow: any, index: number) =>\n            (\n              curFlow ? (\n                <Grid item key={curFlow.id}>\n                  <Flow flow={curFlow} activeFlow={flow} setFlow={setFlow}/>\n                </Grid>\n                ) : (\n                <Grid item key={index}>\n                  <Box height=\"100px\">\n                    <Skeleton variant=\"text\" width={\"40%\"}/>\n                    <Skeleton variant=\"text\"/>\n                    <Skeleton variant=\"rect\" height={\"60%\"}/>\n                  </Box>\n                </Grid>\n              )\n            )\n          )\n        }\n      </Grid>\n    </Grid>\n  )\n  \n  return (\n  <Box height=\"100%\">\n    <Box height=\"8vh\">\n      <Path pathList={pathList} onClick={onPathLickClickHandler}/>\n    </Box>\n    <Box height=\"80vh\">\n      <SplitPane split=\"vertical\" defaultSize=\"15vw\" maxSize={300} minSize={100} style={{height: \"80vh\"}}>\n        <Box height=\"100%\">\n          {FlowsPanel}\n        </Box>\n        <Box height=\"100%\">\n          <FlowRuns flow={flow} flowruns={(loading || error) ? DUMMY_FLOWRUNS : data.get_flowruns}/>\n        </Box>\n      </SplitPane>\n      \n    </Box>\n  </Box>\n)\n}\n\nexport default Flows;\n","import React from \"react\";\nimport {useState} from \"react\";\nimport Box from '@material-ui/core/Box';\nimport SplitPane from \"react-split-pane\";\n\nimport Header from \"./header\";\nimport Path from \"./path\";\nimport ShowPanel from \"./show/show\"\nimport \"../style/resizer.css\"\nimport HomeIcon from '@material-ui/icons/Home';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Flows from \"./flows\"\n\n\nimport {ApolloClient, InMemoryCache, ApolloProvider, useQuery} from '@apollo/client';\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core\";\nimport {GET_FLOWS} from \"./graphql\";\n\nconst DUMMY_FLOWS = Array(15).fill(null)\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    panel: {\n      height: \"100%\",\n      width: \"100%\"\n    }\n  })\n);\n\n\nfunction Main() {\n  const classes = useStyles()\n  \n  \n  const {loading, error, data} = useQuery(GET_FLOWS, {\n    variables: {\n      input: {},\n    },\n    // pollInterval: 5000,\n  });\n  \n  \n  \n  return (\n      <Box height=\"100%\" width=\"100%\">\n        <Flows flows={(loading || error) ? DUMMY_FLOWS : data.get_flows}/>\n      </Box>\n      \n  )\n}\n\nexport default Main\n\n","import React, {useState} from \"react\";\nimport Box from \"@material-ui/core/Box\"\nimport {createStyles, Divider, makeStyles, Theme} from \"@material-ui/core\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Paper from \"@material-ui/core/Paper\"\nimport InputBase from \"@material-ui/core/InputBase\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuIcon from \"@material-ui/icons/Menu\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport CenterFocusStrongIcon from '@material-ui/icons/CenterFocusStrong';\n\n\nconst useServerChooserStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: '2px 4px',\n      display: 'flex',\n      alignItems: 'center',\n      width: 200,\n      flexDirection: \"row\",\n      zIndex: 999999999999\n    },\n    input: {\n      flex: 1\n    },\n    iconButton: {\n      padding: 10\n    },\n    divider: {\n      height: 28,\n      margin: 4\n    }\n  })\n)\n\n\nconst useHeaderStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    title: {\n      flexGrow: 1,\n    }\n  })\n)\n\n\n// @ts-ignore\nfunction ServerChooser({server, setServer}) {\n  const classes = useServerChooserStyles()\n  const [inputServer, setInputServer] = useState(server)\n  \n  \n  const onChangeHandler = (e: any) => {\n    setInputServer(e.target.value)\n  }\n  \n  const onClickHandler = () => {\n    setServer(inputServer)\n  }\n  \n  return (\n    <Paper className={classes.root}>\n      <IconButton className={classes.iconButton}>\n        <MenuIcon/>\n      </IconButton>\n      <InputBase\n        className={classes.input}\n        placeholder=\"Server address\"\n        defaultValue={server}\n        onChange={onChangeHandler}\n      />\n      <Divider className={classes.divider} orientation=\"vertical\"/>\n      <IconButton color=\"primary\" className={classes.iconButton} onClick={onClickHandler}>\n        <CenterFocusStrongIcon/>\n      </IconButton>\n    </Paper>\n  )\n}\n\n// @ts-ignore\nfunction Header({server, setServer}) {\n  const classes = useHeaderStyles()\n  return (\n    <Box className={classes.root}>\n      <AppBar position=\"fixed\" color=\"secondary\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton}>\n            <MenuIcon/>\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Flowsaber\n          </Typography>\n          <ServerChooser server={server} setServer={setServer}/>\n        </Toolbar>\n      </AppBar>\n    </Box>\n  )\n}\n\nexport default Header","import { createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#ff6f00\"\n    },\n    secondary: {\n      main: \"#fff\",\n    },\n  },\n  typography: {\n    // In Chinese and Japanese the characters are usually larger,\n    // so a smaller fontsize may be appropriate.\n    fontSize: 15,\n  },\n  \n});\n\n\nexport default theme","import React, {useState} from 'react';\nimport './style/App.css';\nimport Main from \"./panel/main\"\nimport Box from \"@material-ui/core/Box\";\nimport Header from \"./panel/header\";\nimport {ApolloClient, ApolloProvider, InMemoryCache} from \"@apollo/client\";\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from \"./panel/theme\"\n\n\nfunction App() {\n  const [server, setServer ]= useState(\"https://flowsaber.herokuapp.com/graphql/\")\n  const client = new ApolloClient({\n    uri: server,\n    cache: new InMemoryCache()\n  })\n  return (\n    <ThemeProvider theme={theme}>\n      <Box className=\"App\" height=\"100vh\">\n        <Box height=\"10vh\">\n          <Header server={server} setServer={setServer}/>\n        </Box>\n        <ApolloProvider client={client}>\n          <Main/>\n        </ApolloProvider>\n      </Box>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}